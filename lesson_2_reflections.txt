What happens when you initialize a repository? Why do you need to do it?
- A .git directory is created.  This lets git know that you are tracking it.


How is the staging area different from the working directory and the repository?
What value do you think it offers?
- Staging area is for files you're ready to commit.  The working directory is just all the files in the directory so staging lets you explictly name files to commit.  The repository contains the history.


How can you use the staging area to make sure you have one commit per logical
change?
- You can keep on adding changes to staging until the next change is clearly of something different.


What are some situations when branches would be helpful in keeping your history
organized? How would branches help?
- If I want two versions of the game.

How do the diagrams help you visualize the branch structure?
- I can see which changes are made in what serires.

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?
- Merging two branches makes a unified set of files that reflects both flow of changes.  We represent it in the diagram as a merge because the two flows come together.

What are the pros and cons of Git's automatic merging vs. always doing merges
manually?
- Automatic merging is less work.  Manual merging ensures more often that the merges make programmatic sense.
